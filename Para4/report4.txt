--------------------------

学籍番号 : 20B30100
氏名 :伊藤悠馬

--------------------------

回答1 :
1.1) 途中結果が表示されなかった理由の説明

operation()を実行しているスレッドとwriteState()を実行しているスレッドがおなじであるため、
それぞれ同時並行で実行をすることができない。
この状態でプログラムを実行してしまうwriteState()が画面描画のため実行時間が比較的長いことに加えて、
最適化によりwriteState()が実行中にoperation()が実行されてしまうこと、
sleep()によってsetText()も停止してしまうことにより、
writeState()がoperation()の実行に間に合わず、labelの表示前にlabelの値が書き換わることで
最後の値のみが表示されてしまう。



1.2) 改良方針の説明

MyThread内でPlatform.runLater()によってsetText()を呼び出すことで、JavaFX Application Threadに描画を行わせている。
これによってsetText()を受け取ったJavaFX Application Threadはイベントハンドラ以外に主だったメソッドが実行されていないため、
setText()を受け取り次第描画表示を変更することができる。
この間MyThreadでは十分な時間sleep()を実行することで、1ステップごとに途中経過を表示することが可能になっている。


1.3) 発生したエラー文は次のとおり

Exception in thread "Thread-4" java.lang.IllegalStateException: 
    Not on FX application thread; currentThread = Thread-4

runLater()の処理内容について

runLater()では中に書いた処理をスレッドの処理がイベントハンドラのみになったのちに処理を実行する。
さらにこの関数はJavaFX Application Thread外で描画を行いたい際に、
JavaFX Application Threadに処理をわたすことができる。


runLater()がjavafxに用意されている理由

JavaFX Application Threadからのみ描画を行う設計になっているため、別のスレッドで描画を行いたいときに
JavaFX Application Threadに描画処理を渡せるようにするため。



回答2 :
2.2)2つのスレッドのそれぞれの処理内容について
1つ目のスレッド:main
このスレッドは、このプログラムで初めに生成されるスレッドであり、Main07クラスのオブジェクトの作成及び各メンバ変数の初期化を行なっている。
サーバー用のJavaFXTargetインスタンスを生成し、クライアント用のShapeManager配列smsを作成しOrderedShapeManagerインスタンスを格納している。
さらにstart()関数内ではwhile文の中でソケットから入力を受け取り、accept()された順に応じてsmsに格納している。
OrderedShapeManagerがMACONNECTION=3個しかないこと、このstart()内の処理がMACONNECTION=3に応じた位置に描画していること
が接続数が3つに限られている要因となっている。

2つ目のスレッド:Tread-3
このスレッドではsmsに格納されたShapeManager要素を描画している。
sms内の全要素を表示したのちに100msスリープを挟んでいる。


2.3)同期についての考えられている配慮

配慮は十分である

十分であると考える場合のその理由

Tread-3内で使われている変数はtargetとsms[]であるがtargetにはfinal修飾子がついており不変であることが約束されている。
またmainスレッドで変更が加えられる可能性のあるsms[]についても操作を加える要素にsynchronizedでロックをかけることで衝突を防いでいる。
Tread-3内で使用されている変数すべてで同期についての処理が行われているので十分である。

2.4)並行サーバを実現するにあたり工夫した点
各クライアントからのデータの表示位置の割り振りについてどのように実現したかなど

まず並列サーバの実装方法としてはスレッドプールを利用した。
ソケットからaccept()したものを処理するMyThread



回答3 :
3.1)改造方針、スレッドの役割分担についての説明






回答4 :
4.1)
PrintStreamでの例外発生を確認する方法





例外処理がPrintStreamと他のStreamとで異なる理由




4.2)
受信機能の追加について、工夫した点があれば記述






今回の課題で特に学べたと感じたこと

