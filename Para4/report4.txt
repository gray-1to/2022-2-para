--------------------------

学籍番号 : 20B30100
氏名 :伊藤悠馬

--------------------------

回答1 :
1.1) 途中結果が表示されなかった理由の説明

operation()を実行しているスレッドとwriteState()を実行しているスレッドがおなじであるため、
それぞれ同時並行で実行をすることができない。
まずrunLater()ではJavaFX Application Threadでの処理が終わり次第、与えた処理の実行を行うものである。
このためJavaFX Application Threadでoperation()が全て実行されたのちにラベルの変更が行われてしまい、この更新が連続で起きるため人間の目ではこの途中経過を見ることができず最終結果のみが表示されたように見えてしまう。


1.2) 改良方針の説明

MyThread内でPlatform.runLater()によってsetText()を呼び出すことで、JavaFX Application Threadに描画を行わせている。
これによってsetText()を受け取ったJavaFX Application Threadはイベントハンドラ以外に主だったメソッドが実行されていないため、
setText()を受け取り次第描画表示を変更することができる。
この間MyThreadでは十分な時間sleep()を実行することで、1ステップごとに途中経過を表示することが可能になっている。


1.3) 発生したエラー文は次のとおり

Exception in thread "Thread-4" java.lang.IllegalStateException: 
    Not on FX application thread; currentThread = Thread-4

runLater()の処理内容について

runLater()では中に書いた処理をスレッドの処理がイベントハンドラのみになったのちに処理を実行する。
さらにこの関数はJavaFX Application Thread外で描画を行いたい際に、
JavaFX Application Threadに処理をわたすことができる。


runLater()がjavafxに用意されている理由

JavaFX Application Threadからのみ描画を行う設計になっているため、別のスレッドで描画を行いたいときに
JavaFX Application Threadに描画処理を渡せるようにするため。



回答2 :
2.2)2つのスレッドのそれぞれの処理内容について

1つ目のスレッド:main

このスレッドは、このプログラムで初めに生成されるスレッドであり、Main07クラスのオブジェクトの作成及び各メンバ変数の初期化を行なっている。
サーバー用のJavaFXTargetインスタンスを生成し、クライアント用のShapeManager配列smsを作成しOrderedShapeManagerインスタンスを格納している。
さらにstart()関数内ではwhile文の中でソケットから入力を受け取り、accept()された順に応じてsmsに格納している。
OrderedShapeManagerがMACONNECTION=3個しかないこと、このstart()内の処理がMACONNECTION=3に応じた位置に描画していること
が接続数が3つに限られている要因となっている。


2つ目のスレッド:Tread-3

このスレッドではsmsに格納されたShapeManager要素を描画している。
sms内の全要素を表示したのちに100msスリープを挟んでいる。


2.3)同期についての考えられている配慮

Main07で実装されている同期についての配慮は以下のとおりである。
・targetに修飾子finalがついている
・sms[]に修飾子finalがついている（しかし配列の中身が不変であることは意味しない）
・Tread-3内でsmsから要素smを取得し描画する際、synchronizedを用いてsmをロックしている。


配慮は十分である

十分であると考える場合のその理由

Tread-3内で使われている変数はtargetとsms[]であるがtargetにはfinal修飾子がついており不変であることが約束されている。
またmainスレッドで変更が加えられる可能性のあるsms[]についても操作を加える要素にsynchronizedでロックをかけることで衝突を防いでいる。
Tread-3内で使用されている変数すべてで同期についての処理が行われているので十分である。


2.4)並行サーバを実現するにあたり工夫した点
各クライアントからのデータの表示位置の割り振りについてどのように実現したかなど

スレッドプールを利用し並列サーバを実装した。
始めにソケットからaccept()したものを処理するMyThreadを順次処理するスレッドプールを定義している。
ここに順次受け取ったソケットからsms[]の中で空いているShapeManagerを渡し生成したMyThreadを流し込み実行させていく。
この時に利用されていないShapeManagerを渡したいので、sms[]に格納されているShapeManagerで使っているものはusedSms[]の同インデックスをtrueにし、使い終わったらfalseにしている。
これによりソケットで接続を受け取ったのちに後にShapeManagerが空くまで待機させ、空き次第MyThreadを生成しスレッドプールで実行させることができる。



回答3 :
3.1)改造方針、スレッドの役割分担についての説明

主な方針としてはクライアントが接続される度にソケットsのOutputStreamをもとに制作したtargetをclient_text_targets[]に格納し、描画用スレッドで描画するたびにclient_text_targets[]の各要素を用いてdraw()を行い現状を送信している。
まずstart()の接続を受け取る部分で接続を受け取り次第今までの処理に加えて、client_text_target[i](iは0~MAXCONNECTIONの中での接続番号)に接続したケットのOutPutstreamから生成したTextTargetを設定している。
main()の中ではclient_text_target[]を初期化した後に新しくスレッドを立ち上げている。
この中で描画の初期化、sms内に保存された各ShapaManagerをサーバーのウィンドウ用Targetとクライアント用のtextTargetでdrawしている。
その後各Target,TextTargetでflush()をして、このスレッドを100msスリープしている。
while文の中で以上のことをやることで恒常的にサーバー側ウィンドウの描画とクライアント側へのデータ送信を行っている。




回答4 :
4.1)
PrintStreamでの例外発生を確認する方法

PrintStream.checkErrorメソッドを呼び出すことで例外的な状況を検知できる。
なのでPrintStreamインスタンスpsの例外発生の検知は
if(ps.checkError()){
    break;
}
のようになる。

例外処理がPrintStreamと他のStreamとで異なる理由

まず第一にprintやprintlnをコードで使用する頻度が多いためPrintStreamでIOExceptionをスローしてしまうと
public void println(String x) throws IOException
のようにコードが助長になってしまう。
これを防ぐためにIOExceptionを送らないようになっている。


4.2)
受信機能の追加について、工夫した点があれば記述

まずサーバー側への処理について説明する。サーバー側へ送信するCameraクラスを格納するto_server_smを宣言しインスタンス化したCameraクラスを格納する。
そして実行時引数で指定されたもののポート番号30000番へのソケットを生成する。そこでサーバーへの出力PrintStreamを作成し、それを用いてサーバー用Targetを生成する。
このTargetの初期化をおこなったのちにクライアント用スレッドの生成後、while文でサーバー用ShapeManagerであるto_server_smを用いてサーバー用のターゲットでdrawを行い情報をサーバーに渡している。その後100msスリープを行なっている。
最後に接続が途切れていないかをto_server_ps.checkError()で確認している。
次にクライアント側ウィンドウの処理を説明する。
main文の始めにクライアント用のShapeManagerであるfrom_server_smを宣言し、ソケットを接続した後、サーバーから受け取った情報を受け取るBufferReaderであるtext_from_serverを宣言している。
受け取った情報を表示するウィンドウclient_targetを宣言しそこに前で定義したclient_targetとfrom_server_smを用いてMainParserを生成し、これでサーバーから送信されたコードを分析させている。
client_targetを初期化したのち、クライアント側の表示情報の受け取り、解析、描画更新を行うスレッドを新しく生成する。
このスレッドはwhile文内でtext_from_serverに格納された情報の解析、それにより変更されたfrom_server_smのウィンドウへの描画を行い、100msのスリープを行なっている。
以上の実装により送受信の機能が実装されている。




今回の課題で特に学べたと感じたこと

スレッド間での情報の受け渡し、特にソケットを用いた情報の取得・発信について学べた。
今回は実装にかなり時間を取られたためコードの細部への配慮が間に合わず、「とりあえず動くコード」になってしまったと思う。
もう少し必要最低限かつ機能拡張性に富んだコードを作るためには課題の量がいささか多いと感じた。