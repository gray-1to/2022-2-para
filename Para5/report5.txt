--------------------------

学籍番号 : 20B30100
氏名 : 伊藤悠馬

--------------------------

回答1 :
1.1) 空欄に入る数は以下のとおり

A： 2^24

B: 8

C: 8

1.2)
並列化で問題となるStreamの処理の番号

1番目のStream処理


1.3)単純に並列化したのでは結果が異なる原因

1番目のStream処理ではaveの最も距離が近かった要素にr,g,bの値を足しているが単純な並列化では同期が取られておらず、同じインデックスに足し算をする処理が連続するなどしたとき足し算の結果が反映されない可能性がある。




1.4)並列化に対応するために行った変更点

並列化された各要素から同時に同一の要素にアクセスされてしまうと競合が起きてしまうので、
1番目のStream処理の結果であるlabel変数のaveへの格納をStream外で行うように変更した。





回答2 :
2.1)
出力される時間の意味

100回の当たり判定にかかった時間

達成された高速化の数値的説明

5回の計測では
SINGLE:49171msec 47988msec 42986msec4 7601msec 47273msec
PARALLEL:31166msec 32520msec 36070msec 28598msec 31349msec
となりそれぞれ平均
SINGLE:47003.8msec
PARALLEL:31940.6msec
という結果となった。
並列化を取り入れることで約68%の実行時間で留めることが可能になった。

計測時間の信頼性を向上させるために行った工夫、計測で注意した点

他のプロセスからの影響を考え、psコマンドで他のプロセスの実行状況が変わっていないことを確かめてから実行を行なった。
各実行時間にはばらつきがあることを想定し、SINGLEとPARALLELの各場合で5回ずつ計測を行った。



2.2)
衝突判定部分の高速化についてのjvisualvmを使用した調査方法の説明

SINGLEとPARALLELのそれぞれを実行し、衝突判定を行うスレッド（自分の場合はThread-3）のgraphic.shape.CollisionCheckerParallel2のCPU占領時間を調べた。


調査により判明した衝突判定部分の高速化前後の処理速度の比率

結果は
SINGLE:14294ms
PARALLEL:8471ms
となり、実行時間は並列化することで約59%となった。



2.3)
発見された改善対象のコード部分

visualvmを用いて実行時間を見てみるとShapeManager.remove()が多くの実行時間を占めている。
この部分のコードを見るとシングルスレッドで削除対象を総当たりで探していることからこの部分を並列ストリームで実装することで実行時間の短縮を図る。


改良方針

削除対象のオブジェクトをdataコレクションから探すという探索を並列ストリームで実装する。
コレクションの各要素を並列して判定したいので、一度配列に直してからインデックスを用いてアクセスをし、削除対象のオブジェクトを描画をしないShapeオブジェクトであるBlankオブジェクトに置き換えることで削除を行なっている。
この部分の並列ストリーム内ではdataを配列化したarray_data配列の各要素にしか変更を行わないため、安全である。

2.4)2.3で行った改良部分の改良前後の処理時間について

処理時間の定義

2.3で着目したShapeManager.remove()のCPU利用時間を処理時間の定義とする。
今回の並列ストリーミングで改善されるのはremove()実行時の削除対象の削除（変更）が中心であるからである。
その他の部分の実行時間、特にCollisionCheckerParallel2.check()の部分は増加することが予想される。
これはremove()でBlankオブジェクトへの置き換えという形での削除となったため、check()で確認しなければならないオブジェクトが減らなくなってしまったためである。


改良前と比べ改良後の処理時間は約79％となった



回答3 :
3.1)ゲーム性を高めるための実装
得点ルールの定義




得点計算のコード部分について




得点表示のためのコード部分について




ゲームの終了条件の定義




ゲームの終了判定のコード部分について





スタートボタンを押した際の新たな初期化処理について






ゲームの難易度の方針





数値選択とゲーム難易度についての実装部分について






3.2)さらなるゲーム性を高めるための実装
実装方針




実装箇所







今回の課題で特に学べたと感じたこと

