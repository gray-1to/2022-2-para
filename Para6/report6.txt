--------------------------

学籍番号 : 20B30100
氏名 : 伊藤悠馬

--------------------------

回答1 :
1.1) 条件分岐文を使う代わりに行った実装についての説明

Max3.clにて最大値を求めるときに組み込み関数のmaxを利用した。
この際に入れ子構造にすることで条件分岐文を使わずに実装した。


回答3 :
3.1)
barrier(CLK_LOCAL_MEM_FENCE)の挿入箇所とその必要な理由

各forループの最後にbarrierによる同期が必要である。
各ワークアイテムにおいて、mosaic.clの52行目のif文の条件を満たすときだけ平均値が格納される。
そのため、その平均値の計算の時には一つ前のステップでの平均値の計算が終わっている必要があるため、barrierによって前のステップの平均値の計算が終わっていることを保証している。


3.2)
1ワークグループに属するワークアイテム数

16



回答4 :
4.2)
スレッドセーフではないために生じたことが明瞭にわかる映像を作るにあたっ
て意図した点
（どうすれば誤った静止画像が頻発するか、どのような模様ならば誤りが明瞭か）

カメラ画像の描画処理中にスライダーの値が変わってしまう問題を視覚化した。
カメラ画像の描画処理であるtarget.draw(sm)の前後で赤と青の円をx座標が(スライダーの値)*320となるよう登録している。
登録後、各円の描画を行なっている。
もしカメラ画像の描画処理中にスライダーの値が変わるのであれば赤、青の円はずれた位置に描画されるはずである。
この状態でスライダーを左右に少し早く動かすと赤、青の二つの円がずれて見える。
よって画像の描画処理の前後でスライダーの値が変わってしまっているとわかる。


4.3)
録画機能がスレッドセーフでない原因

残像の長さを制御するスライダーが描画スレッドとスライダーのイベントハンドラのスレッドで共有されているが、この部分がスレッドセーフではない。
カメラ画像の描画処理中にスライダーの値が変更されてしまう可能性がある。



スレッドセーフとするための改良方針

カメラ画像の描画処理中にスライダーの値が変わることのないよう、synchronizedを用いてスライダーをロックしておく。
これによりカメラ画像描画中にスライダーの値が変わることがなくなり、描画が終了し次第スリープに入るためこの時間中にスライダーのイベントハンドラが機能することができる。


スレッドセーフとするためのソースコードの修正部分

カメラ画像を処理する部分でsynchronizedを用いてスライダーをロックする。
今回は改善できたことを確認できるよう、赤、青の円の描画部分も含めた処理をsynchronizedブロックで囲っている。




今回の課題で特に学べたと感じたこと

OpenCLを用いた並列処理を実感できた。